{"remainingRequest":"E:\\padagogy-object\\padagogy-reception\\node_modules\\babel-loader\\lib\\index.js!E:\\padagogy-object\\padagogy-reception\\src\\mock\\article.js","dependencies":[{"path":"E:\\padagogy-object\\padagogy-reception\\src\\mock\\article.js","mtime":1654139416233},{"path":"E:\\padagogy-object\\padagogy-reception\\babel.config.js","mtime":1647849872931},{"path":"E:\\padagogy-object\\padagogy-reception\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647849868210},{"path":"E:\\padagogy-object\\padagogy-reception\\node_modules\\babel-loader\\lib\\index.js","mtime":1647849868753}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:/padagogy-object/padagogy-reception/src/mock/article.js"],"names":["Mock","qs"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,EAAP,MAAe,aAAfsourcesContent":["import Mock from \"mockjs\";\r\nimport qs from \"querystring\";\r\n// Mock.setup({\r\n//   timeout: 2000,\r\n// });\r\n\r\n// Mock.mock(/^\\/api\\/artlist(\\?.+)?$/, \"get\", function (options) {\r\n//   const query = qs.parse(options.url);\r\n//   console.log(query);\r\n//   const a = Mock.mock({\r\n//     code: 0,\r\n//     msg: \"\",\r\n//     data: {\r\n//       \"total|200-500\": 0,\r\n//       [`rows|${query.limit || 10}`]: [\r\n//         {\r\n//           id: \"@guid\",\r\n//           thumb: Mock.Random.image(\"300x150\"),\r\n//           title: \"@ctitle\",\r\n//           description: \"@cparagraph\",\r\n//           createDate: \"@date\",\r\n//         },\r\n//       ],\r\n//     },\r\n//   });\r\n//   //   console.log(\"a\", a);\r\n//   return a;\r\n// });\r\n\r\n// Mock.mock(/^\\/api\\/article\\/[^/]+$/, {\r\n//   code: 0,\r\n//   msg: \"\",\r\n//   data: {\r\n//     id: \"1\",\r\n//     title: \"CORS跨域方案详解\",\r\n//     description: \"@cparagraph(1, 10)\",\r\n//     \"size|100-10000\": 0,\r\n//     \"amount|0-100\": 0,\r\n//     createDate: \"@date('T')\",\r\n//     htmlContent: `<blockquote>\r\n//   <p>阅读本文，你需要首先知道：</p><ol>\r\n//   <li>浏览器的同源策略</li>\r\n//   <li>跨域问题</li>\r\n//   <li>JSONP原理</li>\r\n//   <li>cookie原理</li>\r\n//   </ol>\r\n//   </blockquote>\r\n//   <p>JSONP并不是一个好的跨域解决方案，它至少有着下面两个严重问题：</p><ol>\r\n//   <li><strong>会打乱服务器的消息格式</strong>：JSONP要求服务器响应一段JS代码，但在非跨域的情况下，服务器又需要响应一个正常的JSON格式</li>\r\n//   <li><strong>只能完成GET请求</strong>：JSONP的原理会要求浏览器端生成一个<code>script</code>元素，而<code>script</code>元素发出的请求只能是<code>get</code>请求</li>\r\n//   </ol>\r\n//   <p>所以，CORS是一种更好的跨域解决方案。</p><h1 id=\"article-md-title-1\">概述</h1><p><code>CORS</code>是基于<code>http1.1</code>的一种跨域解决方案，它的全称是<strong>C</strong>ross-<strong>O</strong>rigin <strong>R</strong>esource <strong>S</strong>haring，跨域资源共享。</p><p>它的总体思路是：<strong>如果浏览器要跨域访问服务器的资源，需要获得服务器的允许</strong></p><figure class=\"markdown-image\">\r\n\r\n//         <img style=\"width:auto\" src=\"http://mdrs.yuanjin.tech/img/image-20200421152122793.png\" title=\"image-20200421152122793\" alt=\"image-20200421152122793\">\r\n//         <figcaption>image-20200421152122793</figcaption>\r\n\r\n//       </figure><p>而要知道，一个请求可以附带很多信息，从而会对服务器造成不同程度的影响</p><p>比如有的请求只是获取一些新闻，有的请求会改动服务器的数据</p><p>针对不同的请求，CORS规定了三种不同的交互模式，分别是：</p><ul>\r\n//   <li><strong>简单请求</strong></li>\r\n//   <li><strong>需要预检的请求</strong></li>\r\n//   <li><strong>附带身份凭证的请求</strong></li>\r\n//   </ul>\r\n//   <p>这三种模式从上到下层层递进，请求可以做的事越来越多，要求也越来越严格。</p><p>下面分别说明三种请求模式的具体规范。</p><h1 id=\"article-md-title-2\">简单请求</h1><p>当浏览器端运行了一段ajax代码（无论是使用XMLHttpRequest还是fetch api），浏览器会首先判断它属于哪一种请求模式</p><h2 id=\"article-md-title-3\">简单请求的判定</h2><p>当请求<strong>同时满足</strong>以下条件时，浏览器会认为它是一个简单请求：</p><ol>\r\n//   <li><p><strong>请求方法属于下面的一种：</strong></p><ul>\r\n//   <li>get</li>\r\n//   <li>post</li>\r\n//   <li>head</li>\r\n//   </ul>\r\n//   </li>\r\n//   <li><p><strong>请求头仅包含安全的字段，常见的安全字段如下：</strong></p><ul>\r\n//   <li><code>Accept</code></li>\r\n//   <li><code>Accept-Language</code></li>\r\n//   <li><code>Content-Language</code></li>\r\n//   <li><code>Content-Type</code></li>\r\n//   <li><code>DPR</code></li>\r\n//   <li><code>Downlink</code></li>\r\n//   <li><code>Save-Data</code></li>\r\n//   <li><code>Viewport-Width</code></li>\r\n//   <li><code>Width</code></li>\r\n//   </ul>\r\n//   </li>\r\n//   <li><p><strong>请求头如果包含<code>Content-Type</code>，仅限下面的值之一：</strong></p><ul>\r\n//   <li><code>text/plain</code></li>\r\n//   <li><code>multipart/form-data</code></li>\r\n//   <li><code>application/x-www-form-urlencoded</code></li>\r\n//   </ul>\r\n//   </li>\r\n//   </ol>\r\n//   <p>如果以上三个条件同时满足，浏览器判定为简单请求。</p><p>下面是一些例子：</p><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 简单请求</span>\r\n//   fetch(<span class=\"hljs-string\">\"http://crossdomain.com/api/news\"</span>);\r\n\r\n//   <span class=\"hljs-comment\">// 请求方法不满足要求，不是简单请求</span>\r\n//   fetch(<span class=\"hljs-string\">\"http://crossdomain.com/api/news\"</span>, {\r\n//     <span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">\"PUT\"</span>\r\n//   })\r\n\r\n//   <span class=\"hljs-comment\">// 加入了额外的请求头，不是简单请求</span>\r\n//   fetch(<span class=\"hljs-string\">\"http://crossdomain.com/api/news\"</span>, {\r\n//     <span class=\"hljs-attr\">headers</span>:{\r\n//       <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>\r\n//     }\r\n//   })\r\n\r\n//   <span class=\"hljs-comment\">// 简单请求</span>\r\n//   fetch(<span class=\"hljs-string\">\"http://crossdomain.com/api/news\"</span>, {\r\n//     <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"post\"</span>\r\n//   })\r\n\r\n//   <span class=\"hljs-comment\">// content-type不满足要求，不是简单请求</span>\r\n//   fetch(<span class=\"hljs-string\">\"http://crossdomain.com/api/news\"</span>, {\r\n//     <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"post\"</span>,\r\n//     <span class=\"hljs-attr\">headers</span>: {\r\n//       <span class=\"hljs-string\">\"content-type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>\r\n//     }\r\n//   })</code></pre>\r\n//   <h2 id=\"article-md-title-4\">简单请求的交互规范</h2><p>当浏览器判定某个<strong>ajax跨域请求</strong>是<strong>简单请求</strong>时，会发生以下的事情</p><ol>\r\n//   <li><strong>请求头中会自动添加<code>Origin</code>字段</strong></li>\r\n//   </ol>\r\n//   <p>比如，在页面<code>http://my.com/index.html</code>中有以下代码造成了跨域</p><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 简单请求</span>\r\n//   fetch(<span class=\"hljs-string\">\"http://crossdomain.com/api/news\"</span>);</code></pre>\r\n//   <p>请求发出后，请求头会是下面的格式：</p><pre><code>GET /api/news/ HTTP/1.1\r\n//   Host: crossdomain.com\r\n//   Connection: keep-alive\r\n//   ...\r\n//   Referer: http://my.com/index.html\r\n//   Origin: http://my.com</code></pre><p>看到最后一行没，<code>Origin</code>字段会告诉服务器，是哪个源地址在跨域请求</p><ol start=\"2\">\r\n//   <li><strong>服务器响应头中应包含<code>Access-Control-Allow-Origin</code></strong></li>\r\n//   </ol>\r\n//   <p>当服务器收到请求后，如果允许该请求跨域访问，需要在响应头中添加<code>Access-Control-Allow-Origin</code>字段</p><p>该字段的值可以是：</p><ul>\r\n//   <li>*：表示我很开放，什么人我都允许访问</li>\r\n//   <li>具体的源：比如<code>http://my.com</code>，表示我就允许你访问</li>\r\n//   </ul>\r\n//   <blockquote>\r\n//   <p>实际上，这两个值对于客户端<code>http://my.com</code>而言，都一样，因为客户端才不会管其他源服务器允不允许，就关心自己是否被允许</p><p>当然，服务器也可以维护一个可被允许的源列表，如果请求的<code>Origin</code>命中该列表，才响应<code>*</code>或具体的源</p><p><strong>为了避免后续的麻烦，强烈推荐响应具体的源</strong></p></blockquote>\r\n//   <p>假设服务器做出了以下的响应：</p><pre><code>HTTP/1.1 200 OK\r\n//   Date: Tue, 21 Apr 2020 08:03:35 GMT\r\n//   ...\r\n//   Access-Control-Allow-Origin: http://my.com\r\n//   ...\r\n\r\n//   消息体中的数据</code></pre><p>当浏览器看到服务器允许自己访问后，高兴的像一个两百斤的孩子，于是，它就把响应顺利的交给js，以完成后续的操作</p><p>下图简述了整个交互过程</p><figure class=\"markdown-image\">\r\n\r\n//         <img style=\"width:auto\" src=\"http://mdrs.yuanjin.tech/img/image-20200421162846480.png\" title=\"image-20200421162846480\" alt=\"image-20200421162846480\">\r\n//         <figcaption>image-20200421162846480</figcaption>\r\n\r\n//       </figure><h1 id=\"article-md-title-5\">需要预检的请求</h1><p>简单的请求对服务器的威胁不大，所以允许使用上述的简单交互即可完成。</p><p>但是，如果浏览器不认为这是一种简单请求，就会按照下面的流程进行：</p><ol>\r\n//   <li><strong>浏览器发送预检请求，询问服务器是否允许</strong></li>\r\n//   <li><strong>服务器允许</strong></li>\r\n//   <li><strong>浏览器发送真实请求</strong></li>\r\n//   <li><strong>服务器完成真实的响应</strong></li>\r\n//   </ol>\r\n//   <p>比如，在页面<code>http://my.com/index.html</code>中有以下代码造成了跨域</p><pre><code class=\"language-js\"><span class=\"hljs-comment\">// 需要预检的请求</span>\r\n//   fetch(<span class=\"hljs-string\">\"http://crossdomain.com/api/user\"</span>, {\r\n//     <span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">\"POST\"</span>, <span class=\"hljs-comment\">// post 请求</span>\r\n//     <span class=\"hljs-attr\">headers</span>:{  <span class=\"hljs-comment\">// 设置请求头</span>\r\n//       <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\r\n//       <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>,\r\n//       <span class=\"hljs-string\">\"content-type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>\r\n//     },\r\n//     <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"袁小进\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span> }) <span class=\"hljs-comment\">// 设置请求体</span>\r\n//   });</code></pre>\r\n//   <p>浏览器发现它不是一个简单请求，则会按照下面的流程与服务器交互</p><ol>\r\n//   <li><strong>浏览器发送预检请求，询问服务器是否允许</strong></li>\r\n//   </ol>\r\n//   <pre><code>OPTIONS /api/user HTTP/1.1\r\n//   Host: crossdomain.com\r\n//   ...\r\n//   Origin: http://my.com\r\n//   Access-Control-Request-Method: POST\r\n//   Access-Control-Request-Headers: a, b, content-type</code></pre><p>可以看出，这并非我们想要发出的真实请求，请求中不包含我们的响应头，也没有消息体。</p><p>这是一个预检请求，它的目的是询问服务器，是否允许后续的真实请求。</p><p>预检请求<strong>没有请求体</strong>，它包含了后续真实请求要做的事情</p><p>预检请求有以下特征：</p><ul>\r\n//   <li>请求方法为<code>OPTIONS</code></li>\r\n//   <li>没有请求体</li>\r\n//   <li>请求头中包含<ul>\r\n//   <li><code>Origin</code>：请求的源，和简单请求的含义一致</li>\r\n//   <li><code>Access-Control-Request-Method</code>：后续的真实请求将使用的请求方法</li>\r\n//   <li><code>Access-Control-Request-Headers</code>：后续的真实请求会改动的请求头</li>\r\n//   </ul>\r\n//   </li>\r\n//   </ul>\r\n//   <ol start=\"2\">\r\n//   <li><strong>服务器允许</strong></li>\r\n//   </ol>\r\n//   <p>服务器收到预检请求后，可以检查预检请求中包含的信息，如果允许这样的请求，需要响应下面的消息格式</p><pre><code>HTTP/1.1 200 OK\r\n//   Date: Tue, 21 Apr 2020 08:03:35 GMT\r\n//   ...\r\n//   Access-Control-Allow-Origin: http://my.com\r\n//   Access-Control-Allow-Methods: POST\r\n//   Access-Control-Allow-Headers: a, b, content-type\r\n//   Access-Control-Max-Age: 86400\r\n//   ...</code></pre><p>对于预检请求，不需要响应任何的消息体，只需要在响应头中添加：</p><ul>\r\n//   <li><code>Access-Control-Allow-Origin</code>：和简单请求一样，表示允许的源</li>\r\n//   <li><code>Access-Control-Allow-Methods</code>：表示允许的后续真实的请求方法</li>\r\n//   <li><code>Access-Control-Allow-Headers</code>：表示允许改动的请求头</li>\r\n//   <li><code>Access-Control-Max-Age</code>：告诉浏览器，多少秒内，对于同样的请求源、方法、头，都不需要再发送预检请求了</li>\r\n//   </ul>\r\n//   <ol start=\"3\">\r\n//   <li><strong>浏览器发送真实请求</strong></li>\r\n//   </ol>\r\n//   <p>预检被服务器允许后，浏览器就会发送真实请求了，上面的代码会发生下面的请求数据</p><pre><code>POST /api/user HTTP/1.1\r\n//   Host: crossdomain.com\r\n//   Connection: keep-alive\r\n//   ...\r\n//   Referer: http://my.com/index.html\r\n//   Origin: http://my.com\r\n\r\n//   {\"name\": \"袁小进\", \"age\": 18 }</code></pre><ol start=\"4\">\r\n//   <li><strong>服务器响应真实请求</strong></li>\r\n//   </ol>\r\n//   <pre><code>HTTP/1.1 200 OK\r\n//   Date: Tue, 21 Apr 2020 08:03:35 GMT\r\n//   ...\r\n//   Access-Control-Allow-Origin: http://my.com\r\n//   ...\r\n\r\n//   添加用户成功</code></pre><p>可以看出，当完成预检之后，后续的处理与简单请求相同</p><p>下图简述了整个交互过程</p><figure class=\"markdown-image\">\r\n\r\n//         <img style=\"width:auto\" src=\"http://mdrs.yuanjin.tech/img/image-20200421165913320.png\" title=\"image-20200421165913320\" alt=\"image-20200421165913320\">\r\n//         <figcaption>image-20200421165913320</figcaption>\r\n\r\n//       </figure><h1 id=\"article-md-title-6\">附带身份凭证的请求</h1><p>默认情况下，ajax的跨域请求并不会附带cookie，这样一来，某些需要权限的操作就无法进行</p><p>不过可以通过简单的配置就可以实现附带cookie</p><pre><code class=\"language-js\"><span class=\"hljs-comment\">// xhr</span>\r\n//   <span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();\r\n//   xhr.withCredentials = <span class=\"hljs-literal\">true</span>;\r\n\r\n//   <span class=\"hljs-comment\">// fetch api</span>\r\n//   fetch(url, {\r\n//     <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">\"include\"</span>\r\n//   })</code></pre>\r\n//   <p>这样一来，该跨域的ajax请求就是一个<em>附带身份凭证的请求</em></p><p>当一个请求需要附带cookie时，无论它是简单请求，还是预检请求，都会在请求头中添加<code>cookie</code>字段</p><p>而服务器响应时，需要明确告知客户端：服务器允许这样的凭据</p><p>告知的方式也非常的简单，只需要在响应头中添加：<code>Access-Control-Allow-Credentials: true</code>即可</p><p>对于一个附带身份凭证的请求，若服务器没有明确告知，浏览器仍然视为跨域被拒绝。</p><p>另外要特别注意的是：<strong>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin 的值为*</code></strong>。这就是为什么不推荐使用*的原因</p><h1 id=\"article-md-title-7\">一个额外的补充</h1><p>在跨域访问时，JS只能拿到一些最基本的响应头，如：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头。</p><p><code>Access-Control-Expose-Headers</code>头让服务器把允许浏览器访问的头放入白名单，例如：</p><pre><code>Access-Control-Expose-Headers: authorization, a, b</code></pre><p>这样JS就能够访问指定的响应头了。</p>`,\r\n//   },\r\n// });\r\n"]}]}